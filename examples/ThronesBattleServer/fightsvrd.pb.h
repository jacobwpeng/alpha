// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fightsvrd.proto

#ifndef PROTOBUF_fightsvrd_2eproto__INCLUDED
#define PROTOBUF_fightsvrd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace FightServerProtocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fightsvrd_2eproto();
void protobuf_AssignDesc_fightsvrd_2eproto();
void protobuf_ShutdownFile_fightsvrd_2eproto();

class FightProperties;
class FightPair;
class FightPairResult;
class Task;
class TaskResult;

enum ErrorCode {
  kOk = 0,
  kErrorFetchingChallengerUserInfo = 10000,
  kErrorFetchingDefenderUserInfo = 10001,
  kErrorFight = 10002
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = kOk;
const ErrorCode ErrorCode_MAX = kErrorFight;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class FightProperties : public ::google::protobuf::Message {
 public:
  FightProperties();
  virtual ~FightProperties();

  FightProperties(const FightProperties& from);

  inline FightProperties& operator=(const FightProperties& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightProperties& default_instance();

  void Swap(FightProperties* other);

  // implements Message ----------------------------------------------

  FightProperties* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightProperties& from);
  void MergeFrom(const FightProperties& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool no_fight_content = 1;
  inline bool has_no_fight_content() const;
  inline void clear_no_fight_content();
  static const int kNoFightContentFieldNumber = 1;
  inline bool no_fight_content() const;
  inline void set_no_fight_content(bool value);

  // optional bool reload_userinfo_from_db = 2 [default = true];
  inline bool has_reload_userinfo_from_db() const;
  inline void clear_reload_userinfo_from_db();
  static const int kReloadUserinfoFromDbFieldNumber = 2;
  inline bool reload_userinfo_from_db() const;
  inline void set_reload_userinfo_from_db(bool value);

  // @@protoc_insertion_point(class_scope:FightServerProtocol.FightProperties)
 private:
  inline void set_has_no_fight_content();
  inline void clear_has_no_fight_content();
  inline void set_has_reload_userinfo_from_db();
  inline void clear_has_reload_userinfo_from_db();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool no_fight_content_;
  bool reload_userinfo_from_db_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fightsvrd_2eproto();
  friend void protobuf_AssignDesc_fightsvrd_2eproto();
  friend void protobuf_ShutdownFile_fightsvrd_2eproto();

  void InitAsDefaultInstance();
  static FightProperties* default_instance_;
};
// -------------------------------------------------------------------

class FightPair : public ::google::protobuf::Message {
 public:
  FightPair();
  virtual ~FightPair();

  FightPair(const FightPair& from);

  inline FightPair& operator=(const FightPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightPair& default_instance();

  void Swap(FightPair* other);

  // implements Message ----------------------------------------------

  FightPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightPair& from);
  void MergeFrom(const FightPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 challenger = 1;
  inline bool has_challenger() const;
  inline void clear_challenger();
  static const int kChallengerFieldNumber = 1;
  inline ::google::protobuf::uint32 challenger() const;
  inline void set_challenger(::google::protobuf::uint32 value);

  // optional uint32 defender = 2;
  inline bool has_defender() const;
  inline void clear_defender();
  static const int kDefenderFieldNumber = 2;
  inline ::google::protobuf::uint32 defender() const;
  inline void set_defender(::google::protobuf::uint32 value);

  // optional .FightServerProtocol.FightProperties fight_properties = 3;
  inline bool has_fight_properties() const;
  inline void clear_fight_properties();
  static const int kFightPropertiesFieldNumber = 3;
  inline const ::FightServerProtocol::FightProperties& fight_properties() const;
  inline ::FightServerProtocol::FightProperties* mutable_fight_properties();
  inline ::FightServerProtocol::FightProperties* release_fight_properties();
  inline void set_allocated_fight_properties(::FightServerProtocol::FightProperties* fight_properties);

  // @@protoc_insertion_point(class_scope:FightServerProtocol.FightPair)
 private:
  inline void set_has_challenger();
  inline void clear_has_challenger();
  inline void set_has_defender();
  inline void clear_has_defender();
  inline void set_has_fight_properties();
  inline void clear_has_fight_properties();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 challenger_;
  ::google::protobuf::uint32 defender_;
  ::FightServerProtocol::FightProperties* fight_properties_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_fightsvrd_2eproto();
  friend void protobuf_AssignDesc_fightsvrd_2eproto();
  friend void protobuf_ShutdownFile_fightsvrd_2eproto();

  void InitAsDefaultInstance();
  static FightPair* default_instance_;
};
// -------------------------------------------------------------------

class FightPairResult : public ::google::protobuf::Message {
 public:
  FightPairResult();
  virtual ~FightPairResult();

  FightPairResult(const FightPairResult& from);

  inline FightPairResult& operator=(const FightPairResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightPairResult& default_instance();

  void Swap(FightPairResult* other);

  // implements Message ----------------------------------------------

  FightPairResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightPairResult& from);
  void MergeFrom(const FightPairResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);

  // optional uint32 challenger = 2;
  inline bool has_challenger() const;
  inline void clear_challenger();
  static const int kChallengerFieldNumber = 2;
  inline ::google::protobuf::uint32 challenger() const;
  inline void set_challenger(::google::protobuf::uint32 value);

  // optional uint32 defender = 3;
  inline bool has_defender() const;
  inline void clear_defender();
  static const int kDefenderFieldNumber = 3;
  inline ::google::protobuf::uint32 defender() const;
  inline void set_defender(::google::protobuf::uint32 value);

  // optional uint32 winner = 4;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 4;
  inline ::google::protobuf::uint32 winner() const;
  inline void set_winner(::google::protobuf::uint32 value);

  // optional bytes challenger_view_fight_content = 5;
  inline bool has_challenger_view_fight_content() const;
  inline void clear_challenger_view_fight_content();
  static const int kChallengerViewFightContentFieldNumber = 5;
  inline const ::std::string& challenger_view_fight_content() const;
  inline void set_challenger_view_fight_content(const ::std::string& value);
  inline void set_challenger_view_fight_content(const char* value);
  inline void set_challenger_view_fight_content(const void* value, size_t size);
  inline ::std::string* mutable_challenger_view_fight_content();
  inline ::std::string* release_challenger_view_fight_content();
  inline void set_allocated_challenger_view_fight_content(::std::string* challenger_view_fight_content);

  // optional bytes defender_view_fight_content = 6;
  inline bool has_defender_view_fight_content() const;
  inline void clear_defender_view_fight_content();
  static const int kDefenderViewFightContentFieldNumber = 6;
  inline const ::std::string& defender_view_fight_content() const;
  inline void set_defender_view_fight_content(const ::std::string& value);
  inline void set_defender_view_fight_content(const char* value);
  inline void set_defender_view_fight_content(const void* value, size_t size);
  inline ::std::string* mutable_defender_view_fight_content();
  inline ::std::string* release_defender_view_fight_content();
  inline void set_allocated_defender_view_fight_content(::std::string* defender_view_fight_content);

  // @@protoc_insertion_point(class_scope:FightServerProtocol.FightPairResult)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_challenger();
  inline void clear_has_challenger();
  inline void set_has_defender();
  inline void clear_has_defender();
  inline void set_has_winner();
  inline void clear_has_winner();
  inline void set_has_challenger_view_fight_content();
  inline void clear_has_challenger_view_fight_content();
  inline void set_has_defender_view_fight_content();
  inline void clear_has_defender_view_fight_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_;
  ::google::protobuf::uint32 challenger_;
  ::google::protobuf::uint32 defender_;
  ::google::protobuf::uint32 winner_;
  ::std::string* challenger_view_fight_content_;
  ::std::string* defender_view_fight_content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_fightsvrd_2eproto();
  friend void protobuf_AssignDesc_fightsvrd_2eproto();
  friend void protobuf_ShutdownFile_fightsvrd_2eproto();

  void InitAsDefaultInstance();
  static FightPairResult* default_instance_;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 context = 1;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 1;
  inline ::google::protobuf::uint64 context() const;
  inline void set_context(::google::protobuf::uint64 value);

  // optional uint32 fight_type = 2;
  inline bool has_fight_type() const;
  inline void clear_fight_type();
  static const int kFightTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 fight_type() const;
  inline void set_fight_type(::google::protobuf::uint32 value);

  // optional .FightServerProtocol.FightProperties fight_properties = 3;
  inline bool has_fight_properties() const;
  inline void clear_fight_properties();
  static const int kFightPropertiesFieldNumber = 3;
  inline const ::FightServerProtocol::FightProperties& fight_properties() const;
  inline ::FightServerProtocol::FightProperties* mutable_fight_properties();
  inline ::FightServerProtocol::FightProperties* release_fight_properties();
  inline void set_allocated_fight_properties(::FightServerProtocol::FightProperties* fight_properties);

  // repeated .FightServerProtocol.FightPair fight_pair = 4;
  inline int fight_pair_size() const;
  inline void clear_fight_pair();
  static const int kFightPairFieldNumber = 4;
  inline const ::FightServerProtocol::FightPair& fight_pair(int index) const;
  inline ::FightServerProtocol::FightPair* mutable_fight_pair(int index);
  inline ::FightServerProtocol::FightPair* add_fight_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPair >&
      fight_pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPair >*
      mutable_fight_pair();

  // @@protoc_insertion_point(class_scope:FightServerProtocol.Task)
 private:
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_fight_type();
  inline void clear_has_fight_type();
  inline void set_has_fight_properties();
  inline void clear_has_fight_properties();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 context_;
  ::FightServerProtocol::FightProperties* fight_properties_;
  ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPair > fight_pair_;
  ::google::protobuf::uint32 fight_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_fightsvrd_2eproto();
  friend void protobuf_AssignDesc_fightsvrd_2eproto();
  friend void protobuf_ShutdownFile_fightsvrd_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class TaskResult : public ::google::protobuf::Message {
 public:
  TaskResult();
  virtual ~TaskResult();

  TaskResult(const TaskResult& from);

  inline TaskResult& operator=(const TaskResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskResult& default_instance();

  void Swap(TaskResult* other);

  // implements Message ----------------------------------------------

  TaskResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskResult& from);
  void MergeFrom(const TaskResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 context = 1;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 1;
  inline ::google::protobuf::uint64 context() const;
  inline void set_context(::google::protobuf::uint64 value);

  // repeated .FightServerProtocol.FightPairResult fight_pair_result = 2;
  inline int fight_pair_result_size() const;
  inline void clear_fight_pair_result();
  static const int kFightPairResultFieldNumber = 2;
  inline const ::FightServerProtocol::FightPairResult& fight_pair_result(int index) const;
  inline ::FightServerProtocol::FightPairResult* mutable_fight_pair_result(int index);
  inline ::FightServerProtocol::FightPairResult* add_fight_pair_result();
  inline const ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPairResult >&
      fight_pair_result() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPairResult >*
      mutable_fight_pair_result();

  // @@protoc_insertion_point(class_scope:FightServerProtocol.TaskResult)
 private:
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 context_;
  ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPairResult > fight_pair_result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_fightsvrd_2eproto();
  friend void protobuf_AssignDesc_fightsvrd_2eproto();
  friend void protobuf_ShutdownFile_fightsvrd_2eproto();

  void InitAsDefaultInstance();
  static TaskResult* default_instance_;
};
// ===================================================================


// ===================================================================

// FightProperties

// optional bool no_fight_content = 1;
inline bool FightProperties::has_no_fight_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightProperties::set_has_no_fight_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightProperties::clear_has_no_fight_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightProperties::clear_no_fight_content() {
  no_fight_content_ = false;
  clear_has_no_fight_content();
}
inline bool FightProperties::no_fight_content() const {
  return no_fight_content_;
}
inline void FightProperties::set_no_fight_content(bool value) {
  set_has_no_fight_content();
  no_fight_content_ = value;
}

// optional bool reload_userinfo_from_db = 2 [default = true];
inline bool FightProperties::has_reload_userinfo_from_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightProperties::set_has_reload_userinfo_from_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightProperties::clear_has_reload_userinfo_from_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightProperties::clear_reload_userinfo_from_db() {
  reload_userinfo_from_db_ = true;
  clear_has_reload_userinfo_from_db();
}
inline bool FightProperties::reload_userinfo_from_db() const {
  return reload_userinfo_from_db_;
}
inline void FightProperties::set_reload_userinfo_from_db(bool value) {
  set_has_reload_userinfo_from_db();
  reload_userinfo_from_db_ = value;
}

// -------------------------------------------------------------------

// FightPair

// optional uint32 challenger = 1;
inline bool FightPair::has_challenger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightPair::set_has_challenger() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightPair::clear_has_challenger() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightPair::clear_challenger() {
  challenger_ = 0u;
  clear_has_challenger();
}
inline ::google::protobuf::uint32 FightPair::challenger() const {
  return challenger_;
}
inline void FightPair::set_challenger(::google::protobuf::uint32 value) {
  set_has_challenger();
  challenger_ = value;
}

// optional uint32 defender = 2;
inline bool FightPair::has_defender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightPair::set_has_defender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightPair::clear_has_defender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightPair::clear_defender() {
  defender_ = 0u;
  clear_has_defender();
}
inline ::google::protobuf::uint32 FightPair::defender() const {
  return defender_;
}
inline void FightPair::set_defender(::google::protobuf::uint32 value) {
  set_has_defender();
  defender_ = value;
}

// optional .FightServerProtocol.FightProperties fight_properties = 3;
inline bool FightPair::has_fight_properties() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightPair::set_has_fight_properties() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightPair::clear_has_fight_properties() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightPair::clear_fight_properties() {
  if (fight_properties_ != NULL) fight_properties_->::FightServerProtocol::FightProperties::Clear();
  clear_has_fight_properties();
}
inline const ::FightServerProtocol::FightProperties& FightPair::fight_properties() const {
  return fight_properties_ != NULL ? *fight_properties_ : *default_instance_->fight_properties_;
}
inline ::FightServerProtocol::FightProperties* FightPair::mutable_fight_properties() {
  set_has_fight_properties();
  if (fight_properties_ == NULL) fight_properties_ = new ::FightServerProtocol::FightProperties;
  return fight_properties_;
}
inline ::FightServerProtocol::FightProperties* FightPair::release_fight_properties() {
  clear_has_fight_properties();
  ::FightServerProtocol::FightProperties* temp = fight_properties_;
  fight_properties_ = NULL;
  return temp;
}
inline void FightPair::set_allocated_fight_properties(::FightServerProtocol::FightProperties* fight_properties) {
  delete fight_properties_;
  fight_properties_ = fight_properties;
  if (fight_properties) {
    set_has_fight_properties();
  } else {
    clear_has_fight_properties();
  }
}

// -------------------------------------------------------------------

// FightPairResult

// optional sint32 error = 1;
inline bool FightPairResult::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightPairResult::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightPairResult::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightPairResult::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 FightPairResult::error() const {
  return error_;
}
inline void FightPairResult::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
}

// optional uint32 challenger = 2;
inline bool FightPairResult::has_challenger() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightPairResult::set_has_challenger() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightPairResult::clear_has_challenger() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightPairResult::clear_challenger() {
  challenger_ = 0u;
  clear_has_challenger();
}
inline ::google::protobuf::uint32 FightPairResult::challenger() const {
  return challenger_;
}
inline void FightPairResult::set_challenger(::google::protobuf::uint32 value) {
  set_has_challenger();
  challenger_ = value;
}

// optional uint32 defender = 3;
inline bool FightPairResult::has_defender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightPairResult::set_has_defender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightPairResult::clear_has_defender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightPairResult::clear_defender() {
  defender_ = 0u;
  clear_has_defender();
}
inline ::google::protobuf::uint32 FightPairResult::defender() const {
  return defender_;
}
inline void FightPairResult::set_defender(::google::protobuf::uint32 value) {
  set_has_defender();
  defender_ = value;
}

// optional uint32 winner = 4;
inline bool FightPairResult::has_winner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightPairResult::set_has_winner() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightPairResult::clear_has_winner() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightPairResult::clear_winner() {
  winner_ = 0u;
  clear_has_winner();
}
inline ::google::protobuf::uint32 FightPairResult::winner() const {
  return winner_;
}
inline void FightPairResult::set_winner(::google::protobuf::uint32 value) {
  set_has_winner();
  winner_ = value;
}

// optional bytes challenger_view_fight_content = 5;
inline bool FightPairResult::has_challenger_view_fight_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightPairResult::set_has_challenger_view_fight_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightPairResult::clear_has_challenger_view_fight_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightPairResult::clear_challenger_view_fight_content() {
  if (challenger_view_fight_content_ != &::google::protobuf::internal::kEmptyString) {
    challenger_view_fight_content_->clear();
  }
  clear_has_challenger_view_fight_content();
}
inline const ::std::string& FightPairResult::challenger_view_fight_content() const {
  return *challenger_view_fight_content_;
}
inline void FightPairResult::set_challenger_view_fight_content(const ::std::string& value) {
  set_has_challenger_view_fight_content();
  if (challenger_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    challenger_view_fight_content_ = new ::std::string;
  }
  challenger_view_fight_content_->assign(value);
}
inline void FightPairResult::set_challenger_view_fight_content(const char* value) {
  set_has_challenger_view_fight_content();
  if (challenger_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    challenger_view_fight_content_ = new ::std::string;
  }
  challenger_view_fight_content_->assign(value);
}
inline void FightPairResult::set_challenger_view_fight_content(const void* value, size_t size) {
  set_has_challenger_view_fight_content();
  if (challenger_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    challenger_view_fight_content_ = new ::std::string;
  }
  challenger_view_fight_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FightPairResult::mutable_challenger_view_fight_content() {
  set_has_challenger_view_fight_content();
  if (challenger_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    challenger_view_fight_content_ = new ::std::string;
  }
  return challenger_view_fight_content_;
}
inline ::std::string* FightPairResult::release_challenger_view_fight_content() {
  clear_has_challenger_view_fight_content();
  if (challenger_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = challenger_view_fight_content_;
    challenger_view_fight_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FightPairResult::set_allocated_challenger_view_fight_content(::std::string* challenger_view_fight_content) {
  if (challenger_view_fight_content_ != &::google::protobuf::internal::kEmptyString) {
    delete challenger_view_fight_content_;
  }
  if (challenger_view_fight_content) {
    set_has_challenger_view_fight_content();
    challenger_view_fight_content_ = challenger_view_fight_content;
  } else {
    clear_has_challenger_view_fight_content();
    challenger_view_fight_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes defender_view_fight_content = 6;
inline bool FightPairResult::has_defender_view_fight_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightPairResult::set_has_defender_view_fight_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightPairResult::clear_has_defender_view_fight_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightPairResult::clear_defender_view_fight_content() {
  if (defender_view_fight_content_ != &::google::protobuf::internal::kEmptyString) {
    defender_view_fight_content_->clear();
  }
  clear_has_defender_view_fight_content();
}
inline const ::std::string& FightPairResult::defender_view_fight_content() const {
  return *defender_view_fight_content_;
}
inline void FightPairResult::set_defender_view_fight_content(const ::std::string& value) {
  set_has_defender_view_fight_content();
  if (defender_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    defender_view_fight_content_ = new ::std::string;
  }
  defender_view_fight_content_->assign(value);
}
inline void FightPairResult::set_defender_view_fight_content(const char* value) {
  set_has_defender_view_fight_content();
  if (defender_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    defender_view_fight_content_ = new ::std::string;
  }
  defender_view_fight_content_->assign(value);
}
inline void FightPairResult::set_defender_view_fight_content(const void* value, size_t size) {
  set_has_defender_view_fight_content();
  if (defender_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    defender_view_fight_content_ = new ::std::string;
  }
  defender_view_fight_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FightPairResult::mutable_defender_view_fight_content() {
  set_has_defender_view_fight_content();
  if (defender_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    defender_view_fight_content_ = new ::std::string;
  }
  return defender_view_fight_content_;
}
inline ::std::string* FightPairResult::release_defender_view_fight_content() {
  clear_has_defender_view_fight_content();
  if (defender_view_fight_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defender_view_fight_content_;
    defender_view_fight_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FightPairResult::set_allocated_defender_view_fight_content(::std::string* defender_view_fight_content) {
  if (defender_view_fight_content_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_view_fight_content_;
  }
  if (defender_view_fight_content) {
    set_has_defender_view_fight_content();
    defender_view_fight_content_ = defender_view_fight_content;
  } else {
    clear_has_defender_view_fight_content();
    defender_view_fight_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Task

// optional uint64 context = 1;
inline bool Task::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_context() {
  context_ = GOOGLE_ULONGLONG(0);
  clear_has_context();
}
inline ::google::protobuf::uint64 Task::context() const {
  return context_;
}
inline void Task::set_context(::google::protobuf::uint64 value) {
  set_has_context();
  context_ = value;
}

// optional uint32 fight_type = 2;
inline bool Task::has_fight_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_fight_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_fight_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_fight_type() {
  fight_type_ = 0u;
  clear_has_fight_type();
}
inline ::google::protobuf::uint32 Task::fight_type() const {
  return fight_type_;
}
inline void Task::set_fight_type(::google::protobuf::uint32 value) {
  set_has_fight_type();
  fight_type_ = value;
}

// optional .FightServerProtocol.FightProperties fight_properties = 3;
inline bool Task::has_fight_properties() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_fight_properties() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_fight_properties() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_fight_properties() {
  if (fight_properties_ != NULL) fight_properties_->::FightServerProtocol::FightProperties::Clear();
  clear_has_fight_properties();
}
inline const ::FightServerProtocol::FightProperties& Task::fight_properties() const {
  return fight_properties_ != NULL ? *fight_properties_ : *default_instance_->fight_properties_;
}
inline ::FightServerProtocol::FightProperties* Task::mutable_fight_properties() {
  set_has_fight_properties();
  if (fight_properties_ == NULL) fight_properties_ = new ::FightServerProtocol::FightProperties;
  return fight_properties_;
}
inline ::FightServerProtocol::FightProperties* Task::release_fight_properties() {
  clear_has_fight_properties();
  ::FightServerProtocol::FightProperties* temp = fight_properties_;
  fight_properties_ = NULL;
  return temp;
}
inline void Task::set_allocated_fight_properties(::FightServerProtocol::FightProperties* fight_properties) {
  delete fight_properties_;
  fight_properties_ = fight_properties;
  if (fight_properties) {
    set_has_fight_properties();
  } else {
    clear_has_fight_properties();
  }
}

// repeated .FightServerProtocol.FightPair fight_pair = 4;
inline int Task::fight_pair_size() const {
  return fight_pair_.size();
}
inline void Task::clear_fight_pair() {
  fight_pair_.Clear();
}
inline const ::FightServerProtocol::FightPair& Task::fight_pair(int index) const {
  return fight_pair_.Get(index);
}
inline ::FightServerProtocol::FightPair* Task::mutable_fight_pair(int index) {
  return fight_pair_.Mutable(index);
}
inline ::FightServerProtocol::FightPair* Task::add_fight_pair() {
  return fight_pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPair >&
Task::fight_pair() const {
  return fight_pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPair >*
Task::mutable_fight_pair() {
  return &fight_pair_;
}

// -------------------------------------------------------------------

// TaskResult

// optional uint64 context = 1;
inline bool TaskResult::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskResult::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskResult::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskResult::clear_context() {
  context_ = GOOGLE_ULONGLONG(0);
  clear_has_context();
}
inline ::google::protobuf::uint64 TaskResult::context() const {
  return context_;
}
inline void TaskResult::set_context(::google::protobuf::uint64 value) {
  set_has_context();
  context_ = value;
}

// repeated .FightServerProtocol.FightPairResult fight_pair_result = 2;
inline int TaskResult::fight_pair_result_size() const {
  return fight_pair_result_.size();
}
inline void TaskResult::clear_fight_pair_result() {
  fight_pair_result_.Clear();
}
inline const ::FightServerProtocol::FightPairResult& TaskResult::fight_pair_result(int index) const {
  return fight_pair_result_.Get(index);
}
inline ::FightServerProtocol::FightPairResult* TaskResult::mutable_fight_pair_result(int index) {
  return fight_pair_result_.Mutable(index);
}
inline ::FightServerProtocol::FightPairResult* TaskResult::add_fight_pair_result() {
  return fight_pair_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPairResult >&
TaskResult::fight_pair_result() const {
  return fight_pair_result_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightServerProtocol::FightPairResult >*
TaskResult::mutable_fight_pair_result() {
  return &fight_pair_result_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FightServerProtocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FightServerProtocol::ErrorCode>() {
  return ::FightServerProtocol::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fightsvrd_2eproto__INCLUDED
