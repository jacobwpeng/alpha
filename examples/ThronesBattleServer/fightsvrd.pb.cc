// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fightsvrd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fightsvrd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FightServerProtocol {

namespace {

const ::google::protobuf::Descriptor* FightProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightPairResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightPairResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fightsvrd_2eproto() {
  protobuf_AddDesc_fightsvrd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fightsvrd.proto");
  GOOGLE_CHECK(file != NULL);
  FightProperties_descriptor_ = file->message_type(0);
  static const int FightProperties_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProperties, no_fight_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProperties, reload_userinfo_from_db_),
  };
  FightProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightProperties_descriptor_,
      FightProperties::default_instance_,
      FightProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightProperties));
  FightPair_descriptor_ = file->message_type(1);
  static const int FightPair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPair, challenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPair, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPair, fight_properties_),
  };
  FightPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightPair_descriptor_,
      FightPair::default_instance_,
      FightPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightPair));
  FightPairResult_descriptor_ = file->message_type(2);
  static const int FightPairResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPairResult, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPairResult, challenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPairResult, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPairResult, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPairResult, challenger_view_fight_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPairResult, defender_view_fight_content_),
  };
  FightPairResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightPairResult_descriptor_,
      FightPairResult::default_instance_,
      FightPairResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPairResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightPairResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightPairResult));
  Task_descriptor_ = file->message_type(3);
  static const int Task_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, fight_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, fight_properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, fight_pair_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  TaskResult_descriptor_ = file->message_type(4);
  static const int TaskResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, fight_pair_result_),
  };
  TaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskResult_descriptor_,
      TaskResult::default_instance_,
      TaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskResult));
  ErrorCode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fightsvrd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightProperties_descriptor_, &FightProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightPair_descriptor_, &FightPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightPairResult_descriptor_, &FightPairResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskResult_descriptor_, &TaskResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fightsvrd_2eproto() {
  delete FightProperties::default_instance_;
  delete FightProperties_reflection_;
  delete FightPair::default_instance_;
  delete FightPair_reflection_;
  delete FightPairResult::default_instance_;
  delete FightPairResult_reflection_;
  delete Task::default_instance_;
  delete Task_reflection_;
  delete TaskResult::default_instance_;
  delete TaskResult_reflection_;
}

void protobuf_AddDesc_fightsvrd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017fightsvrd.proto\022\023FightServerProtocol\"R"
    "\n\017FightProperties\022\030\n\020no_fight_content\030\001 "
    "\001(\010\022%\n\027reload_userinfo_from_db\030\002 \001(\010:\004tr"
    "ue\"q\n\tFightPair\022\022\n\nchallenger\030\001 \001(\r\022\020\n\010d"
    "efender\030\002 \001(\r\022>\n\020fight_properties\030\003 \001(\0132"
    "$.FightServerProtocol.FightProperties\"\242\001"
    "\n\017FightPairResult\022\r\n\005error\030\001 \001(\021\022\022\n\nchal"
    "lenger\030\002 \001(\r\022\020\n\010defender\030\003 \001(\r\022\016\n\006winner"
    "\030\004 \001(\r\022%\n\035challenger_view_fight_content\030"
    "\005 \001(\014\022#\n\033defender_view_fight_content\030\006 \001"
    "(\014\"\237\001\n\004Task\022\017\n\007context\030\001 \001(\004\022\022\n\nfight_ty"
    "pe\030\002 \001(\r\022>\n\020fight_properties\030\003 \001(\0132$.Fig"
    "htServerProtocol.FightProperties\0222\n\nfigh"
    "t_pair\030\004 \003(\0132\036.FightServerProtocol.Fight"
    "Pair\"^\n\nTaskResult\022\017\n\007context\030\001 \001(\004\022\?\n\021f"
    "ight_pair_result\030\002 \003(\0132$.FightServerProt"
    "ocol.FightPairResult*r\n\tErrorCode\022\007\n\003kOk"
    "\020\000\022%\n kErrorFetchingChallengerUserInfo\020\220"
    "N\022#\n\036kErrorFetchingDefenderUserInfo\020\221N\022\020"
    "\n\013kErrorFight\020\222N", 776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fightsvrd.proto", &protobuf_RegisterTypes);
  FightProperties::default_instance_ = new FightProperties();
  FightPair::default_instance_ = new FightPair();
  FightPairResult::default_instance_ = new FightPairResult();
  Task::default_instance_ = new Task();
  TaskResult::default_instance_ = new TaskResult();
  FightProperties::default_instance_->InitAsDefaultInstance();
  FightPair::default_instance_->InitAsDefaultInstance();
  FightPairResult::default_instance_->InitAsDefaultInstance();
  Task::default_instance_->InitAsDefaultInstance();
  TaskResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fightsvrd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fightsvrd_2eproto {
  StaticDescriptorInitializer_fightsvrd_2eproto() {
    protobuf_AddDesc_fightsvrd_2eproto();
  }
} static_descriptor_initializer_fightsvrd_2eproto_;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 10000:
    case 10001:
    case 10002:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FightProperties::kNoFightContentFieldNumber;
const int FightProperties::kReloadUserinfoFromDbFieldNumber;
#endif  // !_MSC_VER

FightProperties::FightProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightProperties::InitAsDefaultInstance() {
}

FightProperties::FightProperties(const FightProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightProperties::SharedCtor() {
  _cached_size_ = 0;
  no_fight_content_ = false;
  reload_userinfo_from_db_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightProperties::~FightProperties() {
  SharedDtor();
}

void FightProperties::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightProperties_descriptor_;
}

const FightProperties& FightProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightsvrd_2eproto();
  return *default_instance_;
}

FightProperties* FightProperties::default_instance_ = NULL;

FightProperties* FightProperties::New() const {
  return new FightProperties;
}

void FightProperties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    no_fight_content_ = false;
    reload_userinfo_from_db_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool no_fight_content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_fight_content_)));
          set_has_no_fight_content();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reload_userinfo_from_db;
        break;
      }

      // optional bool reload_userinfo_from_db = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reload_userinfo_from_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reload_userinfo_from_db_)));
          set_has_reload_userinfo_from_db();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool no_fight_content = 1;
  if (has_no_fight_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->no_fight_content(), output);
  }

  // optional bool reload_userinfo_from_db = 2 [default = true];
  if (has_reload_userinfo_from_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reload_userinfo_from_db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool no_fight_content = 1;
  if (has_no_fight_content()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->no_fight_content(), target);
  }

  // optional bool reload_userinfo_from_db = 2 [default = true];
  if (has_reload_userinfo_from_db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reload_userinfo_from_db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool no_fight_content = 1;
    if (has_no_fight_content()) {
      total_size += 1 + 1;
    }

    // optional bool reload_userinfo_from_db = 2 [default = true];
    if (has_reload_userinfo_from_db()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightProperties::MergeFrom(const FightProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_no_fight_content()) {
      set_no_fight_content(from.no_fight_content());
    }
    if (from.has_reload_userinfo_from_db()) {
      set_reload_userinfo_from_db(from.reload_userinfo_from_db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightProperties::CopyFrom(const FightProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightProperties::IsInitialized() const {

  return true;
}

void FightProperties::Swap(FightProperties* other) {
  if (other != this) {
    std::swap(no_fight_content_, other->no_fight_content_);
    std::swap(reload_userinfo_from_db_, other->reload_userinfo_from_db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightProperties_descriptor_;
  metadata.reflection = FightProperties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightPair::kChallengerFieldNumber;
const int FightPair::kDefenderFieldNumber;
const int FightPair::kFightPropertiesFieldNumber;
#endif  // !_MSC_VER

FightPair::FightPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightPair::InitAsDefaultInstance() {
  fight_properties_ = const_cast< ::FightServerProtocol::FightProperties*>(&::FightServerProtocol::FightProperties::default_instance());
}

FightPair::FightPair(const FightPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightPair::SharedCtor() {
  _cached_size_ = 0;
  challenger_ = 0u;
  defender_ = 0u;
  fight_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightPair::~FightPair() {
  SharedDtor();
}

void FightPair::SharedDtor() {
  if (this != default_instance_) {
    delete fight_properties_;
  }
}

void FightPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightPair_descriptor_;
}

const FightPair& FightPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightsvrd_2eproto();
  return *default_instance_;
}

FightPair* FightPair::default_instance_ = NULL;

FightPair* FightPair::New() const {
  return new FightPair;
}

void FightPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challenger_ = 0u;
    defender_ = 0u;
    if (has_fight_properties()) {
      if (fight_properties_ != NULL) fight_properties_->::FightServerProtocol::FightProperties::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 challenger = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenger_)));
          set_has_challenger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defender;
        break;
      }

      // optional uint32 defender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_)));
          set_has_defender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fight_properties;
        break;
      }

      // optional .FightServerProtocol.FightProperties fight_properties = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 challenger = 1;
  if (has_challenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenger(), output);
  }

  // optional uint32 defender = 2;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defender(), output);
  }

  // optional .FightServerProtocol.FightProperties fight_properties = 3;
  if (has_fight_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fight_properties(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 challenger = 1;
  if (has_challenger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenger(), target);
  }

  // optional uint32 defender = 2;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defender(), target);
  }

  // optional .FightServerProtocol.FightProperties fight_properties = 3;
  if (has_fight_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fight_properties(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 challenger = 1;
    if (has_challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenger());
    }

    // optional uint32 defender = 2;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender());
    }

    // optional .FightServerProtocol.FightProperties fight_properties = 3;
    if (has_fight_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_properties());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightPair::MergeFrom(const FightPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenger()) {
      set_challenger(from.challenger());
    }
    if (from.has_defender()) {
      set_defender(from.defender());
    }
    if (from.has_fight_properties()) {
      mutable_fight_properties()->::FightServerProtocol::FightProperties::MergeFrom(from.fight_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightPair::CopyFrom(const FightPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightPair::IsInitialized() const {

  return true;
}

void FightPair::Swap(FightPair* other) {
  if (other != this) {
    std::swap(challenger_, other->challenger_);
    std::swap(defender_, other->defender_);
    std::swap(fight_properties_, other->fight_properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightPair_descriptor_;
  metadata.reflection = FightPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightPairResult::kErrorFieldNumber;
const int FightPairResult::kChallengerFieldNumber;
const int FightPairResult::kDefenderFieldNumber;
const int FightPairResult::kWinnerFieldNumber;
const int FightPairResult::kChallengerViewFightContentFieldNumber;
const int FightPairResult::kDefenderViewFightContentFieldNumber;
#endif  // !_MSC_VER

FightPairResult::FightPairResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightPairResult::InitAsDefaultInstance() {
}

FightPairResult::FightPairResult(const FightPairResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightPairResult::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  challenger_ = 0u;
  defender_ = 0u;
  winner_ = 0u;
  challenger_view_fight_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defender_view_fight_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightPairResult::~FightPairResult() {
  SharedDtor();
}

void FightPairResult::SharedDtor() {
  if (challenger_view_fight_content_ != &::google::protobuf::internal::kEmptyString) {
    delete challenger_view_fight_content_;
  }
  if (defender_view_fight_content_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_view_fight_content_;
  }
  if (this != default_instance_) {
  }
}

void FightPairResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightPairResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightPairResult_descriptor_;
}

const FightPairResult& FightPairResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightsvrd_2eproto();
  return *default_instance_;
}

FightPairResult* FightPairResult::default_instance_ = NULL;

FightPairResult* FightPairResult::New() const {
  return new FightPairResult;
}

void FightPairResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    challenger_ = 0u;
    defender_ = 0u;
    winner_ = 0u;
    if (has_challenger_view_fight_content()) {
      if (challenger_view_fight_content_ != &::google::protobuf::internal::kEmptyString) {
        challenger_view_fight_content_->clear();
      }
    }
    if (has_defender_view_fight_content()) {
      if (defender_view_fight_content_ != &::google::protobuf::internal::kEmptyString) {
        defender_view_fight_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightPairResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_challenger;
        break;
      }

      // optional uint32 challenger = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challenger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenger_)));
          set_has_challenger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defender;
        break;
      }

      // optional uint32 defender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_)));
          set_has_defender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winner;
        break;
      }

      // optional uint32 winner = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_challenger_view_fight_content;
        break;
      }

      // optional bytes challenger_view_fight_content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger_view_fight_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challenger_view_fight_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_defender_view_fight_content;
        break;
      }

      // optional bytes defender_view_fight_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_view_fight_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_defender_view_fight_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightPairResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->error(), output);
  }

  // optional uint32 challenger = 2;
  if (has_challenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenger(), output);
  }

  // optional uint32 defender = 3;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->defender(), output);
  }

  // optional uint32 winner = 4;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->winner(), output);
  }

  // optional bytes challenger_view_fight_content = 5;
  if (has_challenger_view_fight_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->challenger_view_fight_content(), output);
  }

  // optional bytes defender_view_fight_content = 6;
  if (has_defender_view_fight_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->defender_view_fight_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightPairResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->error(), target);
  }

  // optional uint32 challenger = 2;
  if (has_challenger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenger(), target);
  }

  // optional uint32 defender = 3;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->defender(), target);
  }

  // optional uint32 winner = 4;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->winner(), target);
  }

  // optional bytes challenger_view_fight_content = 5;
  if (has_challenger_view_fight_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->challenger_view_fight_content(), target);
  }

  // optional bytes defender_view_fight_content = 6;
  if (has_defender_view_fight_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->defender_view_fight_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightPairResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error());
    }

    // optional uint32 challenger = 2;
    if (has_challenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenger());
    }

    // optional uint32 defender = 3;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender());
    }

    // optional uint32 winner = 4;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner());
    }

    // optional bytes challenger_view_fight_content = 5;
    if (has_challenger_view_fight_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->challenger_view_fight_content());
    }

    // optional bytes defender_view_fight_content = 6;
    if (has_defender_view_fight_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->defender_view_fight_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightPairResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightPairResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightPairResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightPairResult::MergeFrom(const FightPairResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_challenger()) {
      set_challenger(from.challenger());
    }
    if (from.has_defender()) {
      set_defender(from.defender());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
    if (from.has_challenger_view_fight_content()) {
      set_challenger_view_fight_content(from.challenger_view_fight_content());
    }
    if (from.has_defender_view_fight_content()) {
      set_defender_view_fight_content(from.defender_view_fight_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightPairResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightPairResult::CopyFrom(const FightPairResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightPairResult::IsInitialized() const {

  return true;
}

void FightPairResult::Swap(FightPairResult* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(challenger_, other->challenger_);
    std::swap(defender_, other->defender_);
    std::swap(winner_, other->winner_);
    std::swap(challenger_view_fight_content_, other->challenger_view_fight_content_);
    std::swap(defender_view_fight_content_, other->defender_view_fight_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightPairResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightPairResult_descriptor_;
  metadata.reflection = FightPairResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Task::kContextFieldNumber;
const int Task::kFightTypeFieldNumber;
const int Task::kFightPropertiesFieldNumber;
const int Task::kFightPairFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
  fight_properties_ = const_cast< ::FightServerProtocol::FightProperties*>(&::FightServerProtocol::FightProperties::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  context_ = GOOGLE_ULONGLONG(0);
  fight_type_ = 0u;
  fight_properties_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != default_instance_) {
    delete fight_properties_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightsvrd_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    context_ = GOOGLE_ULONGLONG(0);
    fight_type_ = 0u;
    if (has_fight_properties()) {
      if (fight_properties_ != NULL) fight_properties_->::FightServerProtocol::FightProperties::Clear();
    }
  }
  fight_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 context = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_)));
          set_has_context();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_type;
        break;
      }

      // optional uint32 fight_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_type_)));
          set_has_fight_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fight_properties;
        break;
      }

      // optional .FightServerProtocol.FightProperties fight_properties = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fight_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fight_pair;
        break;
      }

      // repeated .FightServerProtocol.FightPair fight_pair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fight_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->context(), output);
  }

  // optional uint32 fight_type = 2;
  if (has_fight_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fight_type(), output);
  }

  // optional .FightServerProtocol.FightProperties fight_properties = 3;
  if (has_fight_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fight_properties(), output);
  }

  // repeated .FightServerProtocol.FightPair fight_pair = 4;
  for (int i = 0; i < this->fight_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fight_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 context = 1;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->context(), target);
  }

  // optional uint32 fight_type = 2;
  if (has_fight_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fight_type(), target);
  }

  // optional .FightServerProtocol.FightProperties fight_properties = 3;
  if (has_fight_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fight_properties(), target);
  }

  // repeated .FightServerProtocol.FightPair fight_pair = 4;
  for (int i = 0; i < this->fight_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fight_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context());
    }

    // optional uint32 fight_type = 2;
    if (has_fight_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_type());
    }

    // optional .FightServerProtocol.FightProperties fight_properties = 3;
    if (has_fight_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_properties());
    }

  }
  // repeated .FightServerProtocol.FightPair fight_pair = 4;
  total_size += 1 * this->fight_pair_size();
  for (int i = 0; i < this->fight_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fight_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  fight_pair_.MergeFrom(from.fight_pair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_fight_type()) {
      set_fight_type(from.fight_type());
    }
    if (from.has_fight_properties()) {
      mutable_fight_properties()->::FightServerProtocol::FightProperties::MergeFrom(from.fight_properties());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {

  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(fight_type_, other->fight_type_);
    std::swap(fight_properties_, other->fight_properties_);
    fight_pair_.Swap(&other->fight_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskResult::kContextFieldNumber;
const int TaskResult::kFightPairResultFieldNumber;
#endif  // !_MSC_VER

TaskResult::TaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskResult::InitAsDefaultInstance() {
}

TaskResult::TaskResult(const TaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskResult::SharedCtor() {
  _cached_size_ = 0;
  context_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskResult::~TaskResult() {
  SharedDtor();
}

void TaskResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskResult_descriptor_;
}

const TaskResult& TaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fightsvrd_2eproto();
  return *default_instance_;
}

TaskResult* TaskResult::default_instance_ = NULL;

TaskResult* TaskResult::New() const {
  return new TaskResult;
}

void TaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    context_ = GOOGLE_ULONGLONG(0);
  }
  fight_pair_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 context = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_)));
          set_has_context();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fight_pair_result;
        break;
      }

      // repeated .FightServerProtocol.FightPairResult fight_pair_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_pair_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight_pair_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fight_pair_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->context(), output);
  }

  // repeated .FightServerProtocol.FightPairResult fight_pair_result = 2;
  for (int i = 0; i < this->fight_pair_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fight_pair_result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 context = 1;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->context(), target);
  }

  // repeated .FightServerProtocol.FightPairResult fight_pair_result = 2;
  for (int i = 0; i < this->fight_pair_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fight_pair_result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context());
    }

  }
  // repeated .FightServerProtocol.FightPairResult fight_pair_result = 2;
  total_size += 1 * this->fight_pair_result_size();
  for (int i = 0; i < this->fight_pair_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fight_pair_result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskResult::MergeFrom(const TaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  fight_pair_result_.MergeFrom(from.fight_pair_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      set_context(from.context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskResult::CopyFrom(const TaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResult::IsInitialized() const {

  return true;
}

void TaskResult::Swap(TaskResult* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    fight_pair_result_.Swap(&other->fight_pair_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskResult_descriptor_;
  metadata.reflection = TaskResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FightServerProtocol

// @@protoc_insertion_point(global_scope)
